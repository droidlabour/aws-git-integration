{
    "AWSTemplateFormatVersion": "2010-09-09",
    "Description": "Multi-AZ, load balanced and auto scaled (CPU Utilization) pre-installed with AWS CodeDeploy agent, docker and docker-compose.",
    "Mappings": {
        "EC2RegionMap": {
            "ap-northeast-1": {
                "64": "ami-d85e7fbf"
            },
            "ap-northeast-2": {
                "64": "ami-15d5077b"
            },
            "ap-south-1": {
                "64": "ami-83a8dbec"
            },
            "ap-southeast-1": {
                "64": "ami-0a19a669"
            },
            "ap-southeast-2": {
                "64": "ami-807876e3"
            },
            "ca-central-1": {
                "64": "ami-beea56da"
            },
            "eu-central-1": {
                "64": "ami-25a97a4a"
            },
            "eu-west-1": {
                "64": "ami-09447c6f"
            },
            "eu-west-2": {
                "64": "ami-63342007"
            },
            "sa-east-1": {
                "64": "ami-8df695e1"
            },
            "us-east-1": {
                "64": "ami-772aa961"
            },
            "us-east-2": {
                "64": "ami-8fab8fea"
            },
            "us-west-1": {
                "64": "ami-1da8f27d"
            },
            "us-west-2": {
                "64": "ami-7c22b41c"
            }
        }
    },
    "Outputs": {
        "AutoScalingGroup": {
            "Description": "AutoScaling Group Name",
            "Export": {
                "Name": {
                    "Fn::Sub": "${AWS::StackName}-AutoScalingGroup"
                }
            },
            "Value": {
                "Ref": "DockerHostGroup"
            }
        },
        "StackName": {
            "Description": "Stack Name",
            "Value": {
                "Ref": "AWS::StackName"
            }
        },
        "URL": {
            "Description": "The URL of the website",
            "Value": {
                "Fn::Join": [
                    "",
                    [
                        "http://",
                        {
                            "Fn::GetAtt": [
                                "ElasticLoadBalancer",
                                "DNSName"
                            ]
                        }
                    ]
                ]
            }
        }
    },
    "Parameters": {
        "Application": {
            "AllowedPattern": "(?:[a-z0-9]+(?:[._-][a-z0-9]+)*/)*[a-z0-9]+(?:[._-][a-z0-9]+)*",
            "Description": "Application Name",
            "Type": "String"
        },
        "Environment": {
            "AllowedPattern": "(?:[a-z0-9]+(?:[._-][a-z0-9]+)*/)*[a-z0-9]+(?:[._-][a-z0-9]+)*",
            "Description": "Environment Name",
            "Type": "String"
        },
        "HealthCheckPort": {
            "Description": "Health Check Port",
            "Type": "String"
        },
        "HealthCheckPath": {
            "ConstraintDescription": "must start with /",
            "Description": "Health Check Path",
			"Default": "/",
            "Type": "String"
        },
        "InstanceType": {
            "AllowedValues": [
                "t1.micro",
                "t2.nano",
                "t2.micro",
                "t2.small",
                "t2.medium",
                "t2.large",
                "m1.small",
                "m1.medium",
                "m1.large",
                "m1.xlarge",
                "m2.xlarge",
                "m2.2xlarge",
                "m2.4xlarge",
                "m3.medium",
                "m3.large",
                "m3.xlarge",
                "m3.2xlarge",
                "m4.large",
                "m4.xlarge",
                "m4.2xlarge",
                "m4.4xlarge",
                "m4.10xlarge",
                "c1.medium",
                "c1.xlarge",
                "c3.large",
                "c3.xlarge",
                "c3.2xlarge",
                "c3.4xlarge",
                "c3.8xlarge",
                "c4.large",
                "c4.xlarge",
                "c4.2xlarge",
                "c4.4xlarge",
                "c4.8xlarge",
                "g2.2xlarge",
                "g2.8xlarge",
                "r3.large",
                "r3.xlarge",
                "r3.2xlarge",
                "r3.4xlarge",
                "r3.8xlarge",
                "i2.xlarge",
                "i2.2xlarge",
                "i2.4xlarge",
                "i2.8xlarge",
                "d2.xlarge",
                "d2.2xlarge",
                "d2.4xlarge",
                "d2.8xlarge",
                "hi1.4xlarge",
                "hs1.8xlarge",
                "cr1.8xlarge",
                "cc2.8xlarge",
                "cg1.4xlarge"
            ],
            "ConstraintDescription": "must be a valid EC2 instance type.",
            "Default": "t2.micro",
            "Description": "EC2 instance type",
            "Type": "String"
        },
        "KeyName": {
            "ConstraintDescription": "must be the name of an existing EC2 KeyPair.",
            "Description": "The EC2 Key Pair to allow SSH access to the instances",
            "Type": "String"
        },
		"Subnets": {
          "Type": "CommaDelimitedList",
          "Description": "The list of SubnetIds, for at least two Availability Zones in the region in your Virtual Private Cloud (VPC) Defaults: "
        },
        "VPC": {
            "Description": "VPC ID for EC2 and Elastic Load Balancer",
            "Type": "String"
        }
    },
    "Resources": {
        "CPUAlarmHigh": {
            "Properties": {
                "AlarmActions": [
                    {
                        "Ref": "DockerHostScaleUpPolicy"
                    }
                ],
                "AlarmDescription": "Scale-up if CPU > 90% for 10 minutes",
                "ComparisonOperator": "GreaterThanThreshold",
                "Dimensions": [
                    {
                        "Name": "AutoScalingGroupName",
                        "Value": {
                            "Ref": "DockerHostGroup"
                        }
                    }
                ],
                "EvaluationPeriods": "2",
                "MetricName": "CPUUtilization",
                "Namespace": "AWS/EC2",
                "Period": "300",
                "Statistic": "Average",
                "Threshold": "90"
            },
            "Type": "AWS::CloudWatch::Alarm"
        },
        "CPUAlarmLow": {
            "Properties": {
                "AlarmActions": [
                    {
                        "Ref": "DockerHostScaleDownPolicy"
                    }
                ],
                "AlarmDescription": "Scale-down if CPU < 70% for 10 minutes",
                "ComparisonOperator": "LessThanThreshold",
                "Dimensions": [
                    {
                        "Name": "AutoScalingGroupName",
                        "Value": {
                            "Ref": "DockerHostGroup"
                        }
                    }
                ],
                "EvaluationPeriods": "2",
                "MetricName": "CPUUtilization",
                "Namespace": "AWS/EC2",
                "Period": "300",
                "Statistic": "Average",
                "Threshold": "70"
            },
            "Type": "AWS::CloudWatch::Alarm"
        },
        "DockerHostGroup": {
            "Properties": {
                "LaunchConfigurationName": {
                    "Ref": "LaunchConfig"
                },
                "LoadBalancerNames": [
                    {
                        "Ref": "ElasticLoadBalancer"
                    }
                ],
                "MaxSize": "3",
                "MinSize": "1",
                "Tags": [
                    {
                        "Key": "Name",
                        "PropagateAtLaunch": true,
                        "Value": {
                            "Fn::Join": [
                                "-",
                                [
                                    {
                                        "Ref": "Environment"
                                    },
                                    {
                                        "Ref": "Application"
                                    }
                                ]
                            ]
                        }
                    },
                    {
                        "Key": "Application",
                        "PropagateAtLaunch": true,
                        "Value": {
                            "Ref": "Application"
                        }
                    },
                    {
                        "Key": "Environment",
                        "PropagateAtLaunch": true,
                        "Value": {
                            "Ref": "Environment"
                        }
                    }
                ],
				"VPCZoneIdentifier": {
					"Ref": "Subnets"
				}
            },
            "Type": "AWS::AutoScaling::AutoScalingGroup"
        },
        "DockerHostInstanceProfile": {
            "Properties": {
                "InstanceProfileName": {
                    "Fn::Join": [
                        "-",
                        [
                            "IAM",
                            {
                                "Ref": "Environment"
                            },
                            {
                                "Ref": "Application"
                            },
                            "InstanceProfile"
                        ]
                    ]
                },
                "Path": "/",
                "Roles": [
                    {
                        "Ref": "IAMAssumeDockerHostInstanceRole"
                    }
                ]
            },
            "Type": "AWS::IAM::InstanceProfile"
        },
        "DockerHostScaleDownPolicy": {
            "Properties": {
                "AdjustmentType": "ChangeInCapacity",
                "AutoScalingGroupName": {
                    "Ref": "DockerHostGroup"
                },
                "Cooldown": "60",
                "ScalingAdjustment": "-1"
            },
            "Type": "AWS::AutoScaling::ScalingPolicy"
        },
        "DockerHostScaleUpPolicy": {
            "Properties": {
                "AdjustmentType": "ChangeInCapacity",
                "AutoScalingGroupName": {
                    "Ref": "DockerHostGroup"
                },
                "Cooldown": "60",
                "ScalingAdjustment": "1"
            },
            "Type": "AWS::AutoScaling::ScalingPolicy"
        },
        "ElasticLoadBalancer": {
            "Properties": {
				"SecurityGroups" : [
					{ "Ref" : "ELBSecurityGroup" }
				],
                "Subnets": {
                    "Ref": "Subnets"
                },
                "CrossZone": "true",
                "HealthCheck": {
                    "HealthyThreshold": "3",
                    "Interval": "30",
                    "Target": {
                        "Fn::Join": [
                            "",
                            [
                                "HTTP:",
                                {
                                    "Ref": "HealthCheckPort"
                                },
								{
									"Ref": "HealthCheckPath"
								}
                            ]
                        ]
                    },
                    "Timeout": "5",
                    "UnhealthyThreshold": "5"
                },
                "Listeners": [
                    {
                        "InstancePort": {
                            "Ref": "HealthCheckPort"
                        },
                        "LoadBalancerPort": "80",
                        "Protocol": "HTTP"
                    }
                ],
                "Tags": [
                    {
                        "Key": "Application",
                        "Value": {
                            "Ref": "Application"
                        }
                    },
                    {
                        "Key": "Environment",
                        "Value": {
                            "Ref": "Environment"
                        }
                    }
                ]
            },
            "Type": "AWS::ElasticLoadBalancing::LoadBalancer"
        },
        "IAMAssumeDockerHostInstanceRole": {
            "Properties": {
                "AssumeRolePolicyDocument": {
                    "Statement": [
                        {
                            "Action": [
                                "sts:AssumeRole"
                            ],
                            "Effect": "Allow",
                            "Principal": {
                                "Service": [
                                    "ec2.amazonaws.com"
                                ]
                            }
                        }
                    ],
                    "Version": "2012-10-17"
                },
                "Path": "/",
                "Policies": [
                    {
                        "PolicyDocument": {
                            "Statement": [
                                {
                                    "Action": [
                                        "ec2:DescribeTags"
                                    ],
                                    "Effect": "Allow",
                                    "Resource": "*"
                                },
                                {
                                    "Action": [
                                        "s3:Get*",
                                        "s3:List*"
                                    ],
                                    "Effect": "Allow",
                                    "Resource": "*"
                                },
                                {
                                    "Action": "logs:*",
                                    "Effect": "Allow",
                                    "Resource": "*"
                                }
                            ],
                            "Version": "2012-10-17"
                        },
                        "PolicyName": {
                            "Fn::Join": [
                                "-",
                                [
                                    "IAM",
                                    {
                                        "Ref": "Environment"
                                    },
                                    {
                                        "Ref": "Application"
                                    },
                                    "EC2",
                                    "Policy"
                                ]
                            ]
                        }
                    }
                ],
                "RoleName": {
                    "Fn::Join": [
                        "-",
                        [
                            "IAM",
                            {
                                "Ref": "Environment"
                            },
                            {
                                "Ref": "Application"
                            },
                            "EC2",
                            "Role"
                        ]
                    ]
                }
            },
            "Type": "AWS::IAM::Role"
        },
        "InstanceSecurityGroup": {
            "Properties": {
                "GroupDescription": "Enable SSH public access and HTTP from the load balancer only",
                "SecurityGroupIngress": [
                    {
                        "CidrIp": "0.0.0.0/0",
                        "FromPort": "22",
                        "IpProtocol": "tcp",
                        "ToPort": "22"
                    },
                    {
                        "FromPort": {
                            "Ref": "HealthCheckPort"
                        },
                        "IpProtocol": "tcp",
                        "SourceSecurityGroupId": {
                            "Fn::GetAtt": [
                                "ELBSecurityGroup",
                                "GroupId"
                            ]
                        },
                        "ToPort": {
                            "Ref": "HealthCheckPort"
                        }
                    }
                ],
                "Tags": [
                    {
                        "Key": "Application",
                        "Value": {
                            "Ref": "Application"
                        }
                    },
                    {
                        "Key": "Environment",
                        "Value": {
                            "Ref": "Environment"
                        }
                    }
                ],
				"VpcId": {
					"Ref": "VPC"
				}
            },
            "Type": "AWS::EC2::SecurityGroup"
        },
        "ELBSecurityGroup": {
            "Properties": {
                "GroupDescription": "Enable public access HTTP and HTTPS",
                "SecurityGroupIngress": [
                    {
                        "CidrIp": "0.0.0.0/0",
                        "FromPort": "80",
                        "IpProtocol": "tcp",
                        "ToPort": "80"
                    },
					{
                        "CidrIp": "0.0.0.0/0",
                        "FromPort": "443",
                        "IpProtocol": "tcp",
                        "ToPort": "443"
                    }
                ],
                "Tags": [
                    {
                        "Key": "Application",
                        "Value": {
                            "Ref": "Application"
                        }
                    },
                    {
                        "Key": "Environment",
                        "Value": {
                            "Ref": "Environment"
                        }
                    }
                ],
				"VpcId": {
					"Ref": "VPC"
				}
            },
            "Type": "AWS::EC2::SecurityGroup"
        },
        "LaunchConfig": {
            "Properties": {
                "IamInstanceProfile": {
                    "Ref": "DockerHostInstanceProfile"
                },
                "ImageId": {
                    "Fn::FindInMap": [
                        "EC2RegionMap",
                        {
                            "Ref": "AWS::Region"
                        },
                        "64"
                    ]
                },
                "InstanceType": {
                    "Ref": "InstanceType"
                },
                "KeyName": {
                    "Ref": "KeyName"
                },
                "SecurityGroups": [
					{
						"Fn::GetAtt": [
							"InstanceSecurityGroup",
							"GroupId"
						]
					}
                ],
                "UserData": {
                    "Fn::Base64": {
                        "Fn::Join": [
                            "",
                            [
                                "#!/bin/bash -x\n",
								"set -e -x\n",
                                "exec > >(tee /var/log/user-data.log|logger -t user-data -s 2>/dev/console) 2>&1\n",
                                "export LC_CTYPE=en_US.UTF-8\n",
                                "export LC_ALL=en_US.UTF-8\n",
                                "apt-get update\n",
                                "apt-get install -y python-pip ruby2.0 curl apt-transport-https ca-certificates\n",
                                "pip install -U pip\n",
                                "pip install awscli\n",
                                "apt-key adv --keyserver hkp://p80.pool.sks-keyservers.net:80 --recv-keys 58118E89F3A912897C070ADBF76221572C52609D\n",
                                "echo \"deb https://apt.dockerproject.org/repo ubuntu-trusty main\" > /etc/apt/sources.list.d/docker.list\n",
                                "apt-get update\n",
                                "apt-get purge lxc-docker\n",
                                "apt-cache policy docker-engine\n",
                                "apt-get update\n",
                                "apt-get install -y linux-image-extra-$(uname -r)\n",
                                "apt-get install -y apparmor\n",
                                "apt-get update\n",
                                "apt-get install -y docker-engine\n",
                                "service docker restart\n",
                                "pip install docker-compose\n",
								"export ENV=",
								{
									"Ref": "Environment"
								},
								" >> /etc/environment\n",
                                "curl -L https://aws-codedeploy-us-east-1.s3.amazonaws.com/latest/install > ./install\n",
                                "chmod +x ./install\n",
                                "./install auto\n"
                            ]
                        ]
                    }
                }
            },
            "Type": "AWS::AutoScaling::LaunchConfiguration"
        }
    }
}
