{
    "AWSTemplateFormatVersion": "2010-09-09",
    "Conditions": {
        "AutoGenOutputBucketName": {
            "Fn::Not": [
                {
                    "Fn::Equals": [
                        {
                            "Ref": "OutputBucketName"
                        },
                        ""
                    ]
                }
            ]
        },
        "UseAllowedIps": {
            "Fn::Not": [
                {
                    "Fn::Equals": [
                        {
                            "Ref": "AllowedIps"
                        },
                        ""
                    ]
                }
            ]
        },
        "UseApiSecret": {
            "Fn::Not": [
                {
                    "Fn::Equals": [
                        {
                            "Ref": "ApiSecret"
                        },
                        ""
                    ]
                }
            ]
        },
        "UseGitToken": {
            "Fn::Not": [
                {
                    "Fn::Equals": [
                        {
                            "Ref": "GitToken"
                        },
                        ""
                    ]
                }
            ]
        },
        "UseOauthKey": {
            "Fn::Not": [
                {
                    "Fn::Equals": [
                        {
                            "Ref": "OauthKey"
                        },
                        ""
                    ]
                }
            ]
        },
        "UseOauthSecret": {
            "Fn::Not": [
                {
                    "Fn::Equals": [
                        {
                            "Ref": "OauthSecret"
                        },
                        ""
                    ]
                }
            ]
        }
    },
    "Description": "3rd party git integration with S3",
    "Metadata": {
        "LICENSE": "Copyright 2016 Amazon Web Services, Inc. or its affiliates. All Rights Reserved. This file is licensed to you under the AWS Customer Agreement (the \"License\"). You may not use this file except in compliance with the License. A copy of the License is located at http://aws.amazon.com/agreement/ . This file is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, express or implied. See the License for the specific language governing permissions and limitations under the License."
    },
    "Outputs": {
        "GitPullWebHookApi": {
            "Value": {
                "Fn::Join": [
                    "",
                    [
                        " https://",
                        {
                            "Ref": "WebHookApi"
                        },
                        ".execute-api.",
                        {
                            "Ref": "AWS::Region"
                        },
                        ".amazonaws.com/",
                        {
                            "Ref": "WebHookApiProdStage"
                        },
                        "/gitpull"
                    ]
                ]
            }
        },
        "OutputBucketName": {
            "Value": {
                "Ref": "OutputBucket"
            }
        },
        "PublicSSHKey": {
            "Value": {
                "Ref": "CreateSSHKey"
            }
        },
        "ZipDownloadWebHookApi": {
            "Value": {
                "Fn::Join": [
                    "",
                    [
                        " https://",
                        {
                            "Ref": "WebHookApi"
                        },
                        ".execute-api.",
                        {
                            "Ref": "AWS::Region"
                        },
                        ".amazonaws.com/",
                        {
                            "Ref": "WebHookApiProdStage"
                        },
                        "/zipdl"
                    ]
                ]
            }
        }
    },
    "Parameters": {
        "AllowedIps": {
            "Default": "131.103.20.160/27,165.254.145.0/26,104.192.143.0/24",
            "Description": "git pull method only. Comma seperated list of IP CIDR blocks for source IP authentication. The BitBucket Cloud IP ranges are provided as defaults. Use 192.30.252.0/22,185.199.108.0/22 for Github",
            "Type": "String"
        },
        "ApiSecret": {
            "Default": "",
            "Description": "git pull method only. WebHook Secrets for use with GitHub Enterprise and GitLab. If a secret is matched IP range authentication is bypassed. Cannot contain: , \\ \"",
            "NoEcho": "true",
            "Type": "String"
        },
        "GitToken": {
            "ConstraintDescription": "This token must be generated from the git server/provider",
            "Default": "",
            "Description": "zip download method only. Personal access token, needed for Github, GitHub Enterprise and GitLab",
            "NoEcho": "true",
            "Type": "String"
        },
        "OauthKey": {
            "ConstraintDescription": "This key must be generated from the git server/provider",
            "Default": "",
            "Description": "zip download method only. OAuth2 Key needed for BitBucket",
            "Type": "String"
        },
        "OauthSecret": {
            "ConstraintDescription": "This secret must be generated from the git server/provider",
            "Default": "",
            "Description": "zip download method only. OAuth2 Secret needed for BitBucket",
            "NoEcho": "true",
            "Type": "String"
        },
        "OutputBucketName": {
            "Default": "",
            "Description": "OPTIONAL: Bucket Name where the zip file output should be placed, if left blank a bucket name will be automatically generated.",
            "Type": "String"
        },
        "LambdaArtifactS3Bucket": {
            "Default": "open-source-artifacts",
            "Description": "S3 Bucket Name where Lambda Code is stored, must be in the same region where the stack is deployed. Keep the default if your're deploying  it in us-east-1",
            "Type": "String"
        }
    },
    "Resources": {
        "CreateSSHKey": {
            "Properties": {
                "KMSKey": {
                    "Ref": "KMSKey"
                },
                "KeyBucket": {
                    "Ref": "KeyBucket"
                },
                "Region": {
                    "Ref": "AWS::Region"
                },
                "ServiceToken": {
                    "Fn::GetAtt": [
                        "CreateSSHKeyLambda",
                        "Arn"
                    ]
                }
            },
            "Type": "AWS::CloudFormation::CustomResource",
            "Version": "1.0"
        },
        "CreateSSHKeyLambda": {
            "Properties": {
                "Code": {
                    "S3Bucket": { "Ref": "LambdaArtifactS3Bucket" },
                    "S3Key": "git_intgrtn_aws_s3/CreateSSHKey.zip"
                },
                "Handler": "lambda_function.lambda_handler",
                "MemorySize": "128",
                "Role": {
                    "Fn::GetAtt": [
                        "CreateSSHKeyRole",
                        "Arn"
                    ]
                },
                "Runtime": "python2.7",
                "Timeout": "300"
            },
            "Type": "AWS::Lambda::Function"
        },
        "CreateSSHKeyRole": {
            "Properties": {
                "AssumeRolePolicyDocument": {
                    "Statement": [
                        {
                            "Action": "sts:AssumeRole",
                            "Effect": "Allow",
                            "Principal": {
                                "Service": "lambda.amazonaws.com"
                            }
                        }
                    ],
                    "Version": "2012-10-17"
                },
                "Path": "/",
                "Policies": [
                    {
                        "PolicyDocument": {
                            "Statement": [
                                {
                                    "Action": [
                                        "s3:GetObject"
                                    ],
                                    "Effect": "Allow",
                                    "Resource": [
                                        {
                                            "Fn::Join": [
                                                "",
                                                [
                                                    "arn:aws:s3:::",
                                                    {
                                                        "Ref": "KeyBucket"
                                                    },
                                                    "/crypto.zip"
                                                ]
                                            ]
                                        }
                                    ]
                                },
                                {
                                    "Action": [
                                        "s3:PutObject"
                                    ],
                                    "Effect": "Allow",
                                    "Resource": [
                                        {
                                            "Fn::Join": [
                                                "",
                                                [
                                                    "arn:aws:s3:::",
                                                    {
                                                        "Ref": "KeyBucket"
                                                    },
                                                    "/enc_key"
                                                ]
                                            ]
                                        }
                                    ]
                                },
                                {
                                    "Action": [
                                        "kms:Encrypt"
                                    ],
                                    "Effect": "Allow",
                                    "Resource": [
                                        "*"
                                    ]
                                },
                                {
                                    "Action": [
                                        "logs:CreateLogGroup",
                                        "logs:CreateLogStream",
                                        "logs:PutLogEvents"
                                    ],
                                    "Effect": "Allow",
                                    "Resource": [
                                        "arn:aws:logs:*:*:*"
                                    ]
                                }
                            ],
                            "Version": "2012-10-17"
                        },
                        "PolicyName": "git2cp-sshkeygen"
                    }
                ]
            },
            "Type": "AWS::IAM::Role"
        },
        "DeleteBucketContents": {
            "DependsOn": [
                "KeyBucket",
                "OutputBucket"
            ],
            "Properties": {
                "KeyBucket": {
                    "Ref": "KeyBucket"
                },
                "OutputBucket": {
                    "Ref": "OutputBucket"
                },
                "ServiceToken": {
                    "Fn::GetAtt": [
                        "DeleteBucketContentsLambda",
                        "Arn"
                    ]
                }
            },
            "Type": "AWS::CloudFormation::CustomResource",
            "Version": "1.0"
        },
        "DeleteBucketContentsLambda": {
            "Properties": {
                "Code": {
                    "S3Bucket": { "Ref": "LambdaArtifactS3Bucket" },
                    "S3Key": "git_intgrtn_aws_s3/DeleteBucketContents.zip"
                },
                "Handler": "lambda_function.lambda_handler",
                "MemorySize": "128",
                "Role": {
                    "Fn::GetAtt": [
                        "DeleteBucketContentsRole",
                        "Arn"
                    ]
                },
                "Runtime": "python2.7",
                "Timeout": "300"
            },
            "Type": "AWS::Lambda::Function"
        },
        "DeleteBucketContentsRole": {
            "Properties": {
                "AssumeRolePolicyDocument": {
                    "Statement": [
                        {
                            "Action": "sts:AssumeRole",
                            "Effect": "Allow",
                            "Principal": {
                                "Service": "lambda.amazonaws.com"
                            }
                        }
                    ],
                    "Version": "2012-10-17"
                },
                "Path": "/",
                "Policies": [
                    {
                        "PolicyDocument": {
                            "Statement": [
                                {
                                    "Action": [
                                        "s3:*"
                                    ],
                                    "Effect": "Allow",
                                    "Resource": [
                                        {
                                            "Fn::Join": [
                                                "",
                                                [
                                                    "arn:aws:s3:::",
                                                    {
                                                        "Ref": "KeyBucket"
                                                    },
                                                    "/*"
                                                ]
                                            ]
                                        },
                                        {
                                            "Fn::Join": [
                                                "",
                                                [
                                                    "arn:aws:s3:::",
                                                    {
                                                        "Ref": "OutputBucket"
                                                    },
                                                    "/*"
                                                ]
                                            ]
                                        },
                                        {
                                            "Fn::Join": [
                                                "",
                                                [
                                                    "arn:aws:s3:::",
                                                    {
                                                        "Ref": "KeyBucket"
                                                    }
                                                ]
                                            ]
                                        },
                                        {
                                            "Fn::Join": [
                                                "",
                                                [
                                                    "arn:aws:s3:::",
                                                    {
                                                        "Ref": "OutputBucket"
                                                    }
                                                ]
                                            ]
                                        }
                                    ]
                                },
                                {
                                    "Action": [
                                        "logs:CreateLogGroup",
                                        "logs:CreateLogStream",
                                        "logs:PutLogEvents"
                                    ],
                                    "Effect": "Allow",
                                    "Resource": [
                                        "arn:aws:logs:*:*:*"
                                    ]
                                }
                            ],
                            "Version": "2012-10-17"
                        },
                        "PolicyName": "git2cp-deletebucketcontents"
                    }
                ]
            },
            "Type": "AWS::IAM::Role"
        },
        "GitPullLambda": {
            "Properties": {
                "Code": {
                    "S3Bucket": { "Ref": "LambdaArtifactS3Bucket" },
                    "S3Key": "git_intgrtn_aws_s3/GitPull.zip"
                },
                "Handler": "lambda_function.lambda_handler",
                "MemorySize": "128",
                "Role": {
                    "Fn::GetAtt": [
                        "GitPullRole",
                        "Arn"
                    ]
                },
                "Runtime": "python2.7",
                "Timeout": "300"
            },
            "Type": "AWS::Lambda::Function"
        },
        "GitPullRole": {
            "Properties": {
                "AssumeRolePolicyDocument": {
                    "Statement": [
                        {
                            "Action": "sts:AssumeRole",
                            "Effect": "Allow",
                            "Principal": {
                                "Service": "lambda.amazonaws.com"
                            }
                        }
                    ],
                    "Version": "2012-10-17"
                },
                "Path": "/",
                "Policies": [
                    {
                        "PolicyDocument": {
                            "Statement": [
                                {
                                    "Action": [
                                        "kms:Decrypt"
                                    ],
                                    "Effect": "Allow",
                                    "Resource": [
                                        "*"
                                    ]
                                },
                                {
                                    "Action": [
                                        "s3:PutObject"
                                    ],
                                    "Effect": "Allow",
                                    "Resource": [
                                        {
                                            "Fn::Join": [
                                                "",
                                                [
                                                    "arn:aws:s3:::",
                                                    {
                                                        "Ref": "OutputBucket"
                                                    }
                                                ]
                                            ]
                                        },
                                        {
                                            "Fn::Join": [
                                                "",
                                                [
                                                    "arn:aws:s3:::",
                                                    {
                                                        "Ref": "OutputBucket"
                                                    },
                                                    "/*"
                                                ]
                                            ]
                                        }
                                    ]
                                },
                                {
                                    "Action": [
                                        "s3:GetObject"
                                    ],
                                    "Effect": "Allow",
                                    "Resource": [
                                        {
                                            "Fn::Join": [
                                                "",
                                                [
                                                    "arn:aws:s3:::",
                                                    {
                                                        "Ref": "KeyBucket"
                                                    },
                                                    "/enc_key"
                                                ]
                                            ]
                                        }
                                    ]
                                },
                                {
                                    "Action": [
                                        "logs:CreateLogGroup",
                                        "logs:CreateLogStream",
                                        "logs:PutLogEvents"
                                    ],
                                    "Effect": "Allow",
                                    "Resource": [
                                        "arn:aws:logs:*:*:*"
                                    ]
                                }
                            ],
                            "Version": "2012-10-17"
                        },
                        "PolicyName": "git2cp-gitpull"
                    }
                ]
            },
            "Type": "AWS::IAM::Role"
        },
        "KMSKey": {
            "Properties": {
                "Description": "Bucket to store SSH keys",
                "KeyPolicy": {
                    "Statement": [
                        {
                            "Action": [
                                "kms:Create*",
                                "kms:Describe*",
                                "kms:Enable*",
                                "kms:List*",
                                "kms:Put*",
                                "kms:Update*",
                                "kms:Revoke*",
                                "kms:Disable*",
                                "kms:Get*",
                                "kms:Delete*",
                                "kms:ScheduleKeyDeletion",
                                "kms:CancelKeyDeletion"
                            ],
                            "Effect": "Allow",
                            "Principal": {
                                "AWS": [
                                    {
                                        "Fn::Join": [
                                            "",
                                            [
                                                "arn:aws:iam::",
                                                {
                                                    "Ref": "AWS::AccountId"
                                                },
                                                ":root"
                                            ]
                                        ]
                                    }
                                ]
                            },
                            "Resource": "*",
                            "Sid": "Allow access for Key Administrators"
                        },
                        {
                            "Action": [
                                "kms:Encrypt",
                                "kms:Decrypt",
                                "kms:ReEncrypt*",
                                "kms:GenerateDataKey*",
                                "kms:DescribeKey"
                            ],
                            "Effect": "Allow",
                            "Principal": {
                                "AWS": [
                                    {
                                        "Fn::Join": [
                                            "",
                                            [
                                                "arn:aws:iam::",
                                                {
                                                    "Ref": "AWS::AccountId"
                                                },
                                                ":root"
                                            ]
                                        ]
                                    }
                                ]
                            },
                            "Resource": "*",
                            "Sid": "Allow use of the key"
                        },
                        {
                            "Action": [
                                "kms:CreateGrant",
                                "kms:ListGrants",
                                "kms:RevokeGrant"
                            ],
                            "Condition": {
                                "Bool": {
                                    "kms:GrantIsForAWSResource": true
                                }
                            },
                            "Effect": "Allow",
                            "Principal": {
                                "AWS": [
                                    {
                                        "Fn::Join": [
                                            "",
                                            [
                                                "arn:aws:iam::",
                                                {
                                                    "Ref": "AWS::AccountId"
                                                },
                                                ":root"
                                            ]
                                        ]
                                    }
                                ]
                            },
                            "Resource": "*",
                            "Sid": "Allow attachment of persistent resources"
                        }
                    ],
                    "Version": "2012-10-17"
                }
            },
            "Type": "AWS::KMS::Key"
        },
        "KeyBucket": {
            "Properties": {
                "Tags": []
            },
            "Type": "AWS::S3::Bucket"
        },
        "OutputBucket": {
            "Properties": {
                "BucketName": {
                    "Fn::If": [
                        "AutoGenOutputBucketName",
                        {
                            "Ref": "OutputBucketName"
                        },
                        {
                            "Ref": "AWS::NoValue"
                        }
                    ]
                },
                "Tags": [],
                "VersioningConfiguration": {
                    "Status": "Enabled"
                }
            },
            "Type": "AWS::S3::Bucket"
        },
		"ApiGatewayCloudWatchLogsRole": {
		  "Type": "AWS::IAM::Role",
		  "Properties": {
			"AssumeRolePolicyDocument": {
			  "Version": "2012-10-17",
			  "Statement": [{
				"Effect": "Allow",
				"Principal": { "Service": ["apigateway.amazonaws.com"] },
				"Action": ["sts:AssumeRole"]
			  }]
			},
			"Policies": [{
			  "PolicyName": "ApiGatewayLogsPolicy",
			  "PolicyDocument": {
				"Version": "2012-10-17",
				"Statement": [{
				  "Effect": "Allow",
				  "Action": [
					"logs:CreateLogGroup",
					"logs:CreateLogStream",
					"logs:DescribeLogGroups",
					"logs:DescribeLogStreams",
					"logs:PutLogEvents",
					"logs:GetLogEvents",
					"logs:FilterLogEvents"
				  ],
				  "Resource": "*"
				}]
			  }
			}]
		  }
		},
		"ApiGatewayAccount": {
		  "Type" : "AWS::ApiGateway::Account",
		  "Properties" : {
			"CloudWatchRoleArn" : {"Fn::GetAtt" : ["ApiGatewayCloudWatchLogsRole", "Arn"] }
		  }
		},
        "WebHookApi": {
            "Properties": {
                "Body": {
                    "definitions": {
                        "Empty": {
                            "type": "object"
                        }
                    },
                    "info": {
                        "title": {
                            "Fn::Join": [
                                "",
                                [
                                    "G2CP-",
                                    {
                                        "Ref": "AWS::StackName"
                                    }
                                ]
                            ]
                        },
                        "version": "2016-07-26T07:34:38Z"
                    },
                    "paths": {
                        "/gitpull": {
                            "post": {
                                "consumes": [
                                    "application/json"
                                ],
                                "produces": [
                                    "application/json"
                                ],
                                "responses": {
                                    "200": {
                                        "description": "200 response",
                                        "schema": {
                                            "$ref": "#/definitions/Empty"
                                        }
                                    }
                                },
                                "x-amazon-apigateway-integration": {
                                    "credentials": {
                                        "Fn::GetAtt": [
                                            "WebHookRole",
                                            "Arn"
                                        ]
                                    },
                                    "httpMethod": "POST",
                                    "passthroughBehavior": "when_no_templates",
                                    "requestParameters": {
                                        "integration.request.header.X-Amz-Invocation-Type": "'Event'"
                                    },
                                    "requestTemplates": {
                                        "application/json": {
                                            "Fn::Join": [
                                                "",
                                                [
                                                    "#set($allParams = $input.params())\n",
                                                    "{\n",
                                                    "\"body-json\" : $input.json('$'),\n",
                                                    "\"params\" : {\n",
                                                    "#foreach($type in $allParams.keySet())\n",
                                                    "    #set($params = $allParams.get($type))\n",
                                                    "\"$type\" : {\n",
                                                    "    #foreach($paramName in $params.keySet())\n",
                                                    "    \"$paramName\" : \"$util.escapeJavaScript($params.get($paramName))\"\n",
                                                    "        #if($foreach.hasNext),#end\n",
                                                    "    #end\n",
                                                    "}\n",
                                                    "    #if($foreach.hasNext),#end\n",
                                                    "#end\n",
                                                    "},\n",
                                                    "\"stage-variables\" : {\n",
                                                    "#foreach($key in $stageVariables.keySet())\n",
                                                    "\"$key\" : \"$util.escapeJavaScript($stageVariables.get($key))\"\n",
                                                    "    #if($foreach.hasNext),#end\n",
                                                    "#end\n",
                                                    "},\n",
                                                    "\"context\" : {\n",
                                                    "    \"account-id\" : \"$context.identity.accountId\",\n",
                                                    "    \"api-id\" : \"$context.apiId\",\n",
                                                    "    \"api-key\" : \"$context.identity.apiKey\",\n",
                                                    "    \"authorizer-principal-id\" : \"$context.authorizer.principalId\",\n",
                                                    "    \"caller\" : \"$context.identity.caller\",\n",
                                                    "    \"cognito-authentication-provider\" : \"$context.identity.cognitoAuthenticationProvider\",\n",
                                                    "    \"cognito-authentication-type\" : \"$context.identity.cognitoAuthenticationType\",\n",
                                                    "    \"cognito-identity-id\" : \"$context.identity.cognitoIdentityId\",\n",
                                                    "    \"cognito-identity-pool-id\" : \"$context.identity.cognitoIdentityPoolId\",\n",
                                                    "    \"http-method\" : \"$context.httpMethod\",\n",
                                                    "    \"stage\" : \"$context.stage\",\n",
                                                    "    \"source-ip\" : \"$context.identity.sourceIp\",\n",
                                                    "    \"user\" : \"$context.identity.user\",\n",
                                                    "    \"user-agent\" : \"$context.identity.userAgent\",\n",
                                                    "    \"user-arn\" : \"$context.identity.userArn\",\n",
                                                    "    \"request-id\" : \"$context.requestId\",\n",
                                                    "    \"resource-id\" : \"$context.resourceId\",\n",
                                                    "    \"resource-path\" : \"$context.resourcePath\",\n",
                                                    "    \"allowed-ips\" : \"$stageVariables.allowedips\",\n",
                                                    "    \"api-secrets\" : \"$stageVariables.apisecrets\",\n",
                                                    "    \"key-bucket\" : \"",
                                                    {
                                                        "Ref": "KeyBucket"
                                                    },
                                                    "\",\n",
                                                    "    \"output-bucket\" : \"$stageVariables.outputbucket\",\n",
                                                    "    \"public-key\" : \"",
                                                    {
                                                        "Ref": "CreateSSHKey"
                                                    },
                                                    "\",\n",
													"    \"raw-body\" : $input.body\n",
                                                    "    }\n",
                                                    "}"
                                                ]
                                            ]
                                        }
                                    },
                                    "responses": {
                                        "default": {
                                            "statusCode": "200"
                                        }
                                    },
                                    "type": "aws",
                                    "uri": {
                                        "Fn::Join": [
                                            "",
                                            [
                                                "arn:aws:apigateway:",
                                                {
                                                    "Ref": "AWS::Region"
                                                },
                                                ":lambda:path//2015-03-31/functions/",
                                                {
                                                    "Fn::GetAtt": [
                                                        "GitPullLambda",
                                                        "Arn"
                                                    ]
                                                },
                                                "/invocations"
                                            ]
                                        ]
                                    }
                                }
                            }
                        },
                        "/zipdl": {
                            "post": {
                                "consumes": [
                                    "application/json"
                                ],
                                "produces": [
                                    "application/json"
                                ],
                                "responses": {
                                    "200": {
                                        "description": "200 response",
                                        "schema": {
                                            "$ref": "#/definitions/Empty"
                                        }
                                    }
                                },
                                "x-amazon-apigateway-integration": {
                                    "credentials": {
                                        "Fn::GetAtt": [
                                            "WebHookRole",
                                            "Arn"
                                        ]
                                    },
                                    "httpMethod": "POST",
                                    "passthroughBehavior": "when_no_templates",
                                    "requestParameters": {
                                        "integration.request.header.X-Amz-Invocation-Type": "'Event'"
                                    },
                                    "requestTemplates": {
                                        "application/json": {
                                            "Fn::Join": [
                                                "",
                                                [
                                                    "#set($allParams = $input.params())\n",
                                                    "{\n",
                                                    "\"body-json\" : $input.json('$'),\n",
                                                    "\"params\" : {\n",
                                                    "#foreach($type in $allParams.keySet())\n",
                                                    "    #set($params = $allParams.get($type))\n",
                                                    "\"$type\" : {\n",
                                                    "    #foreach($paramName in $params.keySet())\n",
                                                    "    \"$paramName\" : \"$util.escapeJavaScript($params.get($paramName))\"\n",
                                                    "        #if($foreach.hasNext),#end\n",
                                                    "    #end\n",
                                                    "}\n",
                                                    "    #if($foreach.hasNext),#end\n",
                                                    "#end\n",
                                                    "},\n",
                                                    "\"stage-variables\" : {\n",
                                                    "#foreach($key in $stageVariables.keySet())\n",
                                                    "\"$key\" : \"$util.escapeJavaScript($stageVariables.get($key))\"\n",
                                                    "    #if($foreach.hasNext),#end\n",
                                                    "#end\n",
                                                    "},\n",
                                                    "\"context\" : {\n",
                                                    "    \"account-id\" : \"$context.identity.accountId\",\n",
                                                    "    \"api-id\" : \"$context.apiId\",\n",
                                                    "    \"api-key\" : \"$context.identity.apiKey\",\n",
                                                    "    \"authorizer-principal-id\" : \"$context.authorizer.principalId\",\n",
                                                    "    \"caller\" : \"$context.identity.caller\",\n",
                                                    "    \"cognito-authentication-provider\" : \"$context.identity.cognitoAuthenticationProvider\",\n",
                                                    "    \"cognito-authentication-type\" : \"$context.identity.cognitoAuthenticationType\",\n",
                                                    "    \"cognito-identity-id\" : \"$context.identity.cognitoIdentityId\",\n",
                                                    "    \"cognito-identity-pool-id\" : \"$context.identity.cognitoIdentityPoolId\",\n",
                                                    "    \"http-method\" : \"$context.httpMethod\",\n",
                                                    "    \"stage\" : \"$context.stage\",\n",
                                                    "    \"source-ip\" : \"$context.identity.sourceIp\",\n",
                                                    "    \"user\" : \"$context.identity.user\",\n",
                                                    "    \"user-agent\" : \"$context.identity.userAgent\",\n",
                                                    "    \"user-arn\" : \"$context.identity.userArn\",\n",
                                                    "    \"request-id\" : \"$context.requestId\",\n",
                                                    "    \"resource-id\" : \"$context.resourceId\",\n",
                                                    "    \"resource-path\" : \"$context.resourcePath\",\n",
                                                    "    \"oauth-key\" : \"$stageVariables.oauthkey\",\n",
                                                    "    \"oauth-secret\" : \"$stageVariables.oauthsecret\",\n",
                                                    "    \"output-bucket\" : \"$stageVariables.outputbucket\",\n",
                                                    "    \"git-token\" : \"$stageVariables.gittoken\"\n",
                                                    "    }\n",
                                                    "}"
                                                ]
                                            ]
                                        }
                                    },
                                    "responses": {
                                        "default": {
                                            "statusCode": "200"
                                        }
                                    },
                                    "type": "aws",
                                    "uri": {
                                        "Fn::Join": [
                                            "",
                                            [
                                                "arn:aws:apigateway:",
                                                {
                                                    "Ref": "AWS::Region"
                                                },
                                                ":lambda:path//2015-03-31/functions/",
                                                {
                                                    "Fn::GetAtt": [
                                                        "ZipDlLambda",
                                                        "Arn"
                                                    ]
                                                },
                                                "/invocations"
                                            ]
                                        ]
                                    }
                                }
                            }
                        }
                    },
                    "schemes": [
                        "https"
                    ],
                    "securityDefinitions": {
                        "sigv4": {
                            "in": "header",
                            "name": "Authorization",
                            "type": "apiKey",
                            "x-amazon-apigateway-authtype": "awsSigv4"
                        }
                    },
                    "swagger": "2.0"
                }
            },
            "Type": "AWS::ApiGateway::RestApi"
        },
        "WebHookApiDeployment": {
            "Properties": {
                "RestApiId": {
                    "Ref": "WebHookApi"
                },
                "StageName": "DummyStage"
            },
            "Type": "AWS::ApiGateway::Deployment"
        },
        "WebHookApiProdStage": {
			"DependsOn" : ["ApiGatewayAccount"],
            "Properties": {
                "DeploymentId": {
                    "Ref": "WebHookApiDeployment"
                },
				"MethodSettings": [
					{
                        "ResourcePath": "/gitpull",
                        "HttpMethod": "POST",
                        "LoggingLevel": "INFO",
                        "MetricsEnabled": true,
                        "DataTraceEnabled": true
                    },
                    {
                        "ResourcePath": "/zipdl",
                        "HttpMethod": "POST",
                        "LoggingLevel": "INFO",
                        "MetricsEnabled": true,
                        "DataTraceEnabled": true
                    }
				],
                "RestApiId": {
                    "Ref": "WebHookApi"
                },
                "StageName": "Prod",
                "Variables": {
                    "allowedips": {
                        "Fn::If": [
                            "UseAllowedIps",
                            {
                                "Ref": "AllowedIps"
                            },
                            {
                                "Ref": "AWS::NoValue"
                            }
                        ]
                    },
                    "apisecrets": {
                        "Fn::If": [
                            "UseApiSecret",
                            {
                                "Ref": "ApiSecret"
                            },
                            {
                                "Ref": "AWS::NoValue"
                            }
                        ]
                    },
                    "gittoken": {
                        "Fn::If": [
                            "UseGitToken",
                            {
                                "Ref": "GitToken"
                            },
                            {
                                "Ref": "AWS::NoValue"
                            }
                        ]
                    },
                    "oauthkey": {
                        "Fn::If": [
                            "UseOauthKey",
                            {
                                "Ref": "OauthKey"
                            },
                            {
                                "Ref": "AWS::NoValue"
                            }
                        ]
                    },
                    "oauthsecret": {
                        "Fn::If": [
                            "UseOauthSecret",
                            {
                                "Ref": "OauthSecret"
                            },
                            {
                                "Ref": "AWS::NoValue"
                            }
                        ]
                    },
                    "outputbucket": {
                        "Ref": "OutputBucket"
                    }
                }
            },
            "Type": "AWS::ApiGateway::Stage"
        },
        "WebHookRole": {
            "Properties": {
                "AssumeRolePolicyDocument": {
                    "Statement": [
                        {
                            "Action": "sts:AssumeRole",
                            "Effect": "Allow",
                            "Principal": {
                                "Service": "apigateway.amazonaws.com"
                            }
                        }
                    ],
                    "Version": "2012-10-17"
                },
                "ManagedPolicyArns": [
                    "arn:aws:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs"
                ],
                "Path": "/",
                "Policies": [
                    {
                        "PolicyDocument": {
                            "Statement": [
                                {
                                    "Action": [
                                        "lambda:InvokeAsync",
                                        "lambda:InvokeFunction"
                                    ],
                                    "Effect": "Allow",
                                    "Resource": [
                                        {
                                            "Fn::GetAtt": [
                                                "GitPullLambda",
                                                "Arn"
                                            ]
                                        },
                                        {
                                            "Fn::GetAtt": [
                                                "ZipDlLambda",
                                                "Arn"
                                            ]
                                        }
                                    ]
                                }
                            ],
                            "Version": "2012-10-17"
                        },
                        "PolicyName": "git2cp-webhook"
                    }
                ]
            },
            "Type": "AWS::IAM::Role"
        },
        "ZipDlLambda": {
            "Properties": {
                "Code": {
                    "S3Bucket": { "Ref": "LambdaArtifactS3Bucket" },
                    "S3Key": "git_intgrtn_aws_s3/ZipDownload.zip"
                },
                "Handler": "lambda_function.lambda_handler",
                "MemorySize": 128,
                "Role": {
                    "Fn::GetAtt": [
                        "ZipDlRole",
                        "Arn"
                    ]
                },
                "Runtime": "python2.7",
                "Timeout": 30
            },
            "Type": "AWS::Lambda::Function"
        },
        "ZipDlRole": {
            "Properties": {
                "AssumeRolePolicyDocument": {
                    "Statement": [
                        {
                            "Action": "sts:AssumeRole",
                            "Effect": "Allow",
                            "Principal": {
                                "Service": [
                                    "lambda.amazonaws.com"
                                ]
                            },
                            "Sid": ""
                        }
                    ]
                },
                "Path": "/",
                "Policies": [
                    {
                        "PolicyDocument": {
                            "Statement": [
                                {
                                    "Action": [
                                        "s3:PutObject"
                                    ],
                                    "Effect": "Allow",
                                    "Resource": [
                                        {
                                            "Fn::Join": [
                                                "",
                                                [
                                                    "arn:aws:s3:::",
                                                    {
                                                        "Ref": "OutputBucket"
                                                    }
                                                ]
                                            ]
                                        },
                                        {
                                            "Fn::Join": [
                                                "",
                                                [
                                                    "arn:aws:s3:::",
                                                    {
                                                        "Ref": "OutputBucket"
                                                    },
                                                    "/*"
                                                ]
                                            ]
                                        }
                                    ]
                                },
                                {
                                    "Action": [
                                        "logs:CreateLogGroup",
                                        "logs:CreateLogStream",
                                        "logs:PutLogEvents"
                                    ],
                                    "Effect": "Allow",
                                    "Resource": [
                                        "arn:aws:logs:*:*:*"
                                    ]
                                }
                            ],
                            "Version": "2012-10-17"
                        },
                        "PolicyName": "git2cp-zipdl"
                    }
                ]
            },
            "Type": "AWS::IAM::Role"
        }
    }
}
